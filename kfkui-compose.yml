version: '3.5'
services:
  zookeeper:
    image: wurstmeister/zookeeper   # 镜像
    container_name: zookeeper
    ports:
      - "2181:2181"                 ## 对外暴露的端口号
  kafka:
    image: wurstmeister/kafka       # 镜像
    container_name: kafka
    volumes: 
        - /etc/localtime:/etc/localtime # 挂载位置
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181       
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092 #注意,这里不能设置成localhost和127.0.0.1
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT
      KAFKA_LISTENER_NAME_SELECTOR: INSIDE
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
  kafka2:
    image: wurstmeister/kafka       # 镜像
    container_name: kafka2
    volumes:
        - /etc/localtime:/etc/localtime # 挂载位置
    ports:
      - "9093:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093 #注意,这里不能设置成localhost和127.0.0.1
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT
      KAFKA_LISTENER_NAME_SELECTOR: INSIDE
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
  kafka3:
    image: wurstmeister/kafka       # 镜像
    container_name: kafka3
    volumes:
        - /etc/localtime:/etc/localtime # 挂载位置
    ports:
      - "9094:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9094 #注意,这里不能设置成localhost和127.0.0.1
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT
      KAFKA_LISTENER_NAME_SELECTOR: INSIDE
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
       - "8080:8080"
    depends_on:
      - kafka
      - kafka2
      - kafka3
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka:9092,kafka2:9093,kafka3:9094  # 使用 Kafka 服务的内部网络地址

# 之前我部署kafka-ui 没有成功是因为 没有在同一个网络 不同的容器之间，网络是隔离的，需要连接起来才能够实现相互之间的访问
# kafka 的环境变量会转换成为kafka 的配置 KAFKA_ZOOKEEPER_CONNECT => kafka.zookeeper.connect = zookeeper:2181  这个说的是 kafka 的配置 zookeeper.connect = zookeeper:2181
#  LOG4J_LOGGER_KAFKA_AUTHORIZER_LOGGER=DEBUG, authorizerAppender 说的是 log4J的配置 log4j.logger.kafka.authorizer.logger = DEBUG, authorizerAppender
# 转换成docker命令
#  docker run -d --name zookeeper -p 2181:2181 wurstmeister/zookeeper
#  docker run -d --name kafka -p 9092:9092 --env KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 --env KAFKA_ADVERTISED_LISTENERS=INSIDE://kafka:9092 --env KAFKA_LISTENERS=INSIDE://0.0.0.0:9092 --env KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INSIDE:PLAINTEXT --env KAFKA_LISTENER_NAME_SELECTOR=INSIDE --env KAFKA_INTER_BROKER_LISTENER_NAME=INSIDE wurstmeister/kafka
#  docker run -d --name kafka2 -p 9093:9092 --env KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 --env KAFKA_ADVERTISED_LISTENERS=INSIDE://kafka2:9093 --env KAFKA_LISTENERS=INSIDE://0.0.0.0:9093 --env KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INSIDE:PLAINTEXT --env KAFKA_LISTENER_NAME_SELECTOR=INSIDE --env KAFKA_INTER_BROKER_LISTENER_NAME=INSIDE wurstmeister/kafka
#  docker run -d --name kafka3 -p 9094:9092 --env KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 --env KAFKA_ADVERTISED_LISTENERS=INSIDE://kafka3:9094 --env KAFKA_LISTENERS=INSIDE://0.0.0.0:9094 --env KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INSIDE:PLAINTEXT --env KAFKA_LISTENER_NAME_SELECTOR=INSIDE --env KAFKA_INTER_BROKER_LISTENER_NAME=INSIDE wurstmeister/kafka
#  docker run -d --name kafka-ui -p 8080:8080 --env DYNAMIC_CONFIG_ENABLED='true' --env KAFKA_CLUSTERS_0_NAME='local' --env KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS='kafka:9092,kafka2:9093,kafka3:9094' --link kafka --link kafka2 --link kafka3 provectuslabs/kafka-ui